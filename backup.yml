- name: 'Install OS dependencies' 
  hosts: awx
  become: true

  vars:
   s3_sync_dependencies:
      - python
      - python-dateutil

  tasks:
  - name: 'Ensure mandatory dependencies are present'
    package:
      name: "{{ item }}"
      state: present      
    loop: "{{ s3_sync_dependencies }}"

- name: 'Install python dependencies' 
  hosts: awx
  become: true

  vars:
    pip_install_packages:
      - name: botocore
      - name: boto
      - name: boto3

  roles:
    - geerlingguy.pip

- hosts: awx
  become: true

  vars:
    backup_directory: '/tmp'
    dump_filename: "awx_db_{{ ansible_date_time.iso8601_micro }}.dump" 
    dump_filepath: "{{ backup_directory }}/{{ dump_filename }}"
    dump_archive_path: "{{ backup_directory }}/{{ dump_filename }}.tar.gz"

  tasks:

  - name: 'Check mandatory variables' 
    fail:
      msg: 'variable {{item}} not defined'
    when: item not in vars
    with_items:
      - aws_access_key
      - aws_secret_key
      - aws_s3_bucket
      - aws_s3_bucket_prefix

  - name: 'Backup database with pg_dump'
    command: docker exec awx_postgres pg_dump -U awx -Fc awx
    register: dump_content

  - name: 'Create file from dump action'
    copy:
      content: "{{ dump_content.stdout }}"
      dest: "{{ dump_filepath }}"

  - name: Create a tar.gz archive of a single file.
    archive:
      path: "{{ dump_filepath }}" 
      dest: "{{ dump_archive_path }}"
      format: gz
      force_archive: true
  
  - name: 'Upload {{ dump_archive_path }} to S· Bucket {{ aws_s3_bucket }}'
    aws_s3:
      region: 'eu-west-1'
      bucket: "{{ aws_s3_bucket }}"
      src: "{{ dump_archive_path }}"
      object: "/{{ aws_s3_bucket_prefix }}/{{ dump_filename }}.tar.gz"
      mode: "put"
      
  - name: 'Cleanup archives'
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - dump_filepath 
      - dump_archive_path
 